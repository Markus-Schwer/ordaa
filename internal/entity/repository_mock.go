// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package entity

import (
	"github.com/gofrs/uuid"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			CreateMatrixUserFunc: func(tx *gorm.DB, matrixUser *MatrixUser) (*MatrixUser, error) {
//				panic("mock out the CreateMatrixUser method")
//			},
//			CreateMenuFunc: func(tx *gorm.DB, menu *Menu) (*Menu, error) {
//				panic("mock out the CreateMenu method")
//			},
//			CreateMenuItemFunc: func(tx *gorm.DB, menuItem *MenuItem) (*MenuItem, error) {
//				panic("mock out the CreateMenuItem method")
//			},
//			CreateOrderFunc: func(tx *gorm.DB, order *Order) (*Order, error) {
//				panic("mock out the CreateOrder method")
//			},
//			CreateOrderItemFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, orderItem *OrderItem) (*OrderItem, error) {
//				panic("mock out the CreateOrderItem method")
//			},
//			CreatePasswordUserFunc: func(tx *gorm.DB, passwordUser *PasswordUser) (*PasswordUser, error) {
//				panic("mock out the CreatePasswordUser method")
//			},
//			CreateSshUserFunc: func(tx *gorm.DB, sshUser *SshUser) (*SshUser, error) {
//				panic("mock out the CreateSshUser method")
//			},
//			CreateUserFunc: func(tx *gorm.DB, user *User) (*User, error) {
//				panic("mock out the CreateUser method")
//			},
//			DeleteMatrixUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteMatrixUser method")
//			},
//			DeleteMenuFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteMenu method")
//			},
//			DeleteMenuItemFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteMenuItem method")
//			},
//			DeleteOrderFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteOrder method")
//			},
//			DeleteOrderItemFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteOrderItem method")
//			},
//			DeletePasswordUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeletePasswordUser method")
//			},
//			DeleteSshUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteSshUser method")
//			},
//			DeleteUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			FindPasswordUserFunc: func(tx *gorm.DB, username string) (*PasswordUser, error) {
//				panic("mock out the FindPasswordUser method")
//			},
//			GetActiveOrderByMenuFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error) {
//				panic("mock out the GetActiveOrderByMenu method")
//			},
//			GetActiveOrderByMenuNameFunc: func(tx *gorm.DB, name string) (*Order, error) {
//				panic("mock out the GetActiveOrderByMenuName method")
//			},
//			GetAllMatrixUsersFunc: func(tx *gorm.DB) ([]MatrixUser, error) {
//				panic("mock out the GetAllMatrixUsers method")
//			},
//			GetAllMenusFunc: func(tx *gorm.DB) ([]Menu, error) {
//				panic("mock out the GetAllMenus method")
//			},
//			GetAllOrderItemsFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) ([]OrderItem, error) {
//				panic("mock out the GetAllOrderItems method")
//			},
//			GetAllOrderItemsForOrderAndUserFunc: func(tx *gorm.DB, orderUuid *uuid.UUID, userUuid *uuid.UUID) ([]OrderItem, error) {
//				panic("mock out the GetAllOrderItemsForOrderAndUser method")
//			},
//			GetAllOrdersFunc: func(tx *gorm.DB) ([]Order, error) {
//				panic("mock out the GetAllOrders method")
//			},
//			GetAllPasswordUsersFunc: func(tx *gorm.DB) ([]PasswordUser, error) {
//				panic("mock out the GetAllPasswordUsers method")
//			},
//			GetAllSshUsersFunc: func(tx *gorm.DB) ([]SshUser, error) {
//				panic("mock out the GetAllSshUsers method")
//			},
//			GetAllUsersFunc: func(tx *gorm.DB) ([]User, error) {
//				panic("mock out the GetAllUsers method")
//			},
//			GetMatrixUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MatrixUser, error) {
//				panic("mock out the GetMatrixUser method")
//			},
//			GetMatrixUserByUsernameFunc: func(tx *gorm.DB, username string) (*MatrixUser, error) {
//				panic("mock out the GetMatrixUserByUsername method")
//			},
//			GetMenuFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Menu, error) {
//				panic("mock out the GetMenu method")
//			},
//			GetMenuByNameFunc: func(tx *gorm.DB, name string) (*Menu, error) {
//				panic("mock out the GetMenuByName method")
//			},
//			GetMenuItemFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MenuItem, error) {
//				panic("mock out the GetMenuItem method")
//			},
//			GetMenuItemByShortNameFunc: func(tx *gorm.DB, menuUuid *uuid.UUID, shortName string) (*MenuItem, error) {
//				panic("mock out the GetMenuItemByShortName method")
//			},
//			GetOrderFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error) {
//				panic("mock out the GetOrder method")
//			},
//			GetOrderItemFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*OrderItem, error) {
//				panic("mock out the GetOrderItem method")
//			},
//			GetPasswordUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*PasswordUser, error) {
//				panic("mock out the GetPasswordUser method")
//			},
//			GetSshUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*SshUser, error) {
//				panic("mock out the GetSshUser method")
//			},
//			GetSshUserByPublicKeyFunc: func(tx *gorm.DB, publicKey string) (*SshUser, error) {
//				panic("mock out the GetSshUserByPublicKey method")
//			},
//			GetUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*User, error) {
//				panic("mock out the GetUser method")
//			},
//			GetUserByNameFunc: func(tx *gorm.DB, name string) (*User, error) {
//				panic("mock out the GetUserByName method")
//			},
//			TransactionFunc: func(fn func(tx *gorm.DB) error) error {
//				panic("mock out the Transaction method")
//			},
//			UpdateMatrixUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, matrixUser *MatrixUser) (*MatrixUser, error) {
//				panic("mock out the UpdateMatrixUser method")
//			},
//			UpdateMenuFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, menu *Menu) (*Menu, error) {
//				panic("mock out the UpdateMenu method")
//			},
//			UpdateOrderFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, currentUser *uuid.UUID, order *Order) (*Order, error) {
//				panic("mock out the UpdateOrder method")
//			},
//			UpdateOrderItemFunc: func(tx *gorm.DB, orderItemUuid *uuid.UUID, userUuid *uuid.UUID, orderItem *OrderItem) (*OrderItem, error) {
//				panic("mock out the UpdateOrderItem method")
//			},
//			UpdatePasswordUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, passwordUser *PasswordUser) (*PasswordUser, error) {
//				panic("mock out the UpdatePasswordUser method")
//			},
//			UpdateSshUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, sshUser *SshUser) (*SshUser, error) {
//				panic("mock out the UpdateSshUser method")
//			},
//			UpdateUserFunc: func(tx *gorm.DB, uuidMoqParam *uuid.UUID, user *User) (*User, error) {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateMatrixUserFunc mocks the CreateMatrixUser method.
	CreateMatrixUserFunc func(tx *gorm.DB, matrixUser *MatrixUser) (*MatrixUser, error)

	// CreateMenuFunc mocks the CreateMenu method.
	CreateMenuFunc func(tx *gorm.DB, menu *Menu) (*Menu, error)

	// CreateMenuItemFunc mocks the CreateMenuItem method.
	CreateMenuItemFunc func(tx *gorm.DB, menuItem *MenuItem) (*MenuItem, error)

	// CreateOrderFunc mocks the CreateOrder method.
	CreateOrderFunc func(tx *gorm.DB, order *Order) (*Order, error)

	// CreateOrderItemFunc mocks the CreateOrderItem method.
	CreateOrderItemFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, orderItem *OrderItem) (*OrderItem, error)

	// CreatePasswordUserFunc mocks the CreatePasswordUser method.
	CreatePasswordUserFunc func(tx *gorm.DB, passwordUser *PasswordUser) (*PasswordUser, error)

	// CreateSshUserFunc mocks the CreateSshUser method.
	CreateSshUserFunc func(tx *gorm.DB, sshUser *SshUser) (*SshUser, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(tx *gorm.DB, user *User) (*User, error)

	// DeleteMatrixUserFunc mocks the DeleteMatrixUser method.
	DeleteMatrixUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteMenuFunc mocks the DeleteMenu method.
	DeleteMenuFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteMenuItemFunc mocks the DeleteMenuItem method.
	DeleteMenuItemFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteOrderFunc mocks the DeleteOrder method.
	DeleteOrderFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteOrderItemFunc mocks the DeleteOrderItem method.
	DeleteOrderItemFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeletePasswordUserFunc mocks the DeletePasswordUser method.
	DeletePasswordUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteSshUserFunc mocks the DeleteSshUser method.
	DeleteSshUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) error

	// FindPasswordUserFunc mocks the FindPasswordUser method.
	FindPasswordUserFunc func(tx *gorm.DB, username string) (*PasswordUser, error)

	// GetActiveOrderByMenuFunc mocks the GetActiveOrderByMenu method.
	GetActiveOrderByMenuFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error)

	// GetActiveOrderByMenuNameFunc mocks the GetActiveOrderByMenuName method.
	GetActiveOrderByMenuNameFunc func(tx *gorm.DB, name string) (*Order, error)

	// GetAllMatrixUsersFunc mocks the GetAllMatrixUsers method.
	GetAllMatrixUsersFunc func(tx *gorm.DB) ([]MatrixUser, error)

	// GetAllMenusFunc mocks the GetAllMenus method.
	GetAllMenusFunc func(tx *gorm.DB) ([]Menu, error)

	// GetAllOrderItemsFunc mocks the GetAllOrderItems method.
	GetAllOrderItemsFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) ([]OrderItem, error)

	// GetAllOrderItemsForOrderAndUserFunc mocks the GetAllOrderItemsForOrderAndUser method.
	GetAllOrderItemsForOrderAndUserFunc func(tx *gorm.DB, orderUuid *uuid.UUID, userUuid *uuid.UUID) ([]OrderItem, error)

	// GetAllOrdersFunc mocks the GetAllOrders method.
	GetAllOrdersFunc func(tx *gorm.DB) ([]Order, error)

	// GetAllPasswordUsersFunc mocks the GetAllPasswordUsers method.
	GetAllPasswordUsersFunc func(tx *gorm.DB) ([]PasswordUser, error)

	// GetAllSshUsersFunc mocks the GetAllSshUsers method.
	GetAllSshUsersFunc func(tx *gorm.DB) ([]SshUser, error)

	// GetAllUsersFunc mocks the GetAllUsers method.
	GetAllUsersFunc func(tx *gorm.DB) ([]User, error)

	// GetMatrixUserFunc mocks the GetMatrixUser method.
	GetMatrixUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MatrixUser, error)

	// GetMatrixUserByUsernameFunc mocks the GetMatrixUserByUsername method.
	GetMatrixUserByUsernameFunc func(tx *gorm.DB, username string) (*MatrixUser, error)

	// GetMenuFunc mocks the GetMenu method.
	GetMenuFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Menu, error)

	// GetMenuByNameFunc mocks the GetMenuByName method.
	GetMenuByNameFunc func(tx *gorm.DB, name string) (*Menu, error)

	// GetMenuItemFunc mocks the GetMenuItem method.
	GetMenuItemFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MenuItem, error)

	// GetMenuItemByShortNameFunc mocks the GetMenuItemByShortName method.
	GetMenuItemByShortNameFunc func(tx *gorm.DB, menuUuid *uuid.UUID, shortName string) (*MenuItem, error)

	// GetOrderFunc mocks the GetOrder method.
	GetOrderFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error)

	// GetOrderItemFunc mocks the GetOrderItem method.
	GetOrderItemFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*OrderItem, error)

	// GetPasswordUserFunc mocks the GetPasswordUser method.
	GetPasswordUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*PasswordUser, error)

	// GetSshUserFunc mocks the GetSshUser method.
	GetSshUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*SshUser, error)

	// GetSshUserByPublicKeyFunc mocks the GetSshUserByPublicKey method.
	GetSshUserByPublicKeyFunc func(tx *gorm.DB, publicKey string) (*SshUser, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*User, error)

	// GetUserByNameFunc mocks the GetUserByName method.
	GetUserByNameFunc func(tx *gorm.DB, name string) (*User, error)

	// TransactionFunc mocks the Transaction method.
	TransactionFunc func(fn func(tx *gorm.DB) error) error

	// UpdateMatrixUserFunc mocks the UpdateMatrixUser method.
	UpdateMatrixUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, matrixUser *MatrixUser) (*MatrixUser, error)

	// UpdateMenuFunc mocks the UpdateMenu method.
	UpdateMenuFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, menu *Menu) (*Menu, error)

	// UpdateOrderFunc mocks the UpdateOrder method.
	UpdateOrderFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, currentUser *uuid.UUID, order *Order) (*Order, error)

	// UpdateOrderItemFunc mocks the UpdateOrderItem method.
	UpdateOrderItemFunc func(tx *gorm.DB, orderItemUuid *uuid.UUID, userUuid *uuid.UUID, orderItem *OrderItem) (*OrderItem, error)

	// UpdatePasswordUserFunc mocks the UpdatePasswordUser method.
	UpdatePasswordUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, passwordUser *PasswordUser) (*PasswordUser, error)

	// UpdateSshUserFunc mocks the UpdateSshUser method.
	UpdateSshUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, sshUser *SshUser) (*SshUser, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(tx *gorm.DB, uuidMoqParam *uuid.UUID, user *User) (*User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateMatrixUser holds details about calls to the CreateMatrixUser method.
		CreateMatrixUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// MatrixUser is the matrixUser argument value.
			MatrixUser *MatrixUser
		}
		// CreateMenu holds details about calls to the CreateMenu method.
		CreateMenu []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Menu is the menu argument value.
			Menu *Menu
		}
		// CreateMenuItem holds details about calls to the CreateMenuItem method.
		CreateMenuItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// MenuItem is the menuItem argument value.
			MenuItem *MenuItem
		}
		// CreateOrder holds details about calls to the CreateOrder method.
		CreateOrder []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Order is the order argument value.
			Order *Order
		}
		// CreateOrderItem holds details about calls to the CreateOrderItem method.
		CreateOrderItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// OrderItem is the orderItem argument value.
			OrderItem *OrderItem
		}
		// CreatePasswordUser holds details about calls to the CreatePasswordUser method.
		CreatePasswordUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// PasswordUser is the passwordUser argument value.
			PasswordUser *PasswordUser
		}
		// CreateSshUser holds details about calls to the CreateSshUser method.
		CreateSshUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// SshUser is the sshUser argument value.
			SshUser *SshUser
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// User is the user argument value.
			User *User
		}
		// DeleteMatrixUser holds details about calls to the DeleteMatrixUser method.
		DeleteMatrixUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteMenu holds details about calls to the DeleteMenu method.
		DeleteMenu []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteMenuItem holds details about calls to the DeleteMenuItem method.
		DeleteMenuItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteOrder holds details about calls to the DeleteOrder method.
		DeleteOrder []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteOrderItem holds details about calls to the DeleteOrderItem method.
		DeleteOrderItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeletePasswordUser holds details about calls to the DeletePasswordUser method.
		DeletePasswordUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteSshUser holds details about calls to the DeleteSshUser method.
		DeleteSshUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// FindPasswordUser holds details about calls to the FindPasswordUser method.
		FindPasswordUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Username is the username argument value.
			Username string
		}
		// GetActiveOrderByMenu holds details about calls to the GetActiveOrderByMenu method.
		GetActiveOrderByMenu []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetActiveOrderByMenuName holds details about calls to the GetActiveOrderByMenuName method.
		GetActiveOrderByMenuName []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Name is the name argument value.
			Name string
		}
		// GetAllMatrixUsers holds details about calls to the GetAllMatrixUsers method.
		GetAllMatrixUsers []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetAllMenus holds details about calls to the GetAllMenus method.
		GetAllMenus []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetAllOrderItems holds details about calls to the GetAllOrderItems method.
		GetAllOrderItems []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetAllOrderItemsForOrderAndUser holds details about calls to the GetAllOrderItemsForOrderAndUser method.
		GetAllOrderItemsForOrderAndUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// OrderUuid is the orderUuid argument value.
			OrderUuid *uuid.UUID
			// UserUuid is the userUuid argument value.
			UserUuid *uuid.UUID
		}
		// GetAllOrders holds details about calls to the GetAllOrders method.
		GetAllOrders []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetAllPasswordUsers holds details about calls to the GetAllPasswordUsers method.
		GetAllPasswordUsers []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetAllSshUsers holds details about calls to the GetAllSshUsers method.
		GetAllSshUsers []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetAllUsers holds details about calls to the GetAllUsers method.
		GetAllUsers []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
		}
		// GetMatrixUser holds details about calls to the GetMatrixUser method.
		GetMatrixUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetMatrixUserByUsername holds details about calls to the GetMatrixUserByUsername method.
		GetMatrixUserByUsername []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Username is the username argument value.
			Username string
		}
		// GetMenu holds details about calls to the GetMenu method.
		GetMenu []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetMenuByName holds details about calls to the GetMenuByName method.
		GetMenuByName []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Name is the name argument value.
			Name string
		}
		// GetMenuItem holds details about calls to the GetMenuItem method.
		GetMenuItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetMenuItemByShortName holds details about calls to the GetMenuItemByShortName method.
		GetMenuItemByShortName []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// MenuUuid is the menuUuid argument value.
			MenuUuid *uuid.UUID
			// ShortName is the shortName argument value.
			ShortName string
		}
		// GetOrder holds details about calls to the GetOrder method.
		GetOrder []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetOrderItem holds details about calls to the GetOrderItem method.
		GetOrderItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetPasswordUser holds details about calls to the GetPasswordUser method.
		GetPasswordUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetSshUser holds details about calls to the GetSshUser method.
		GetSshUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetSshUserByPublicKey holds details about calls to the GetSshUserByPublicKey method.
		GetSshUserByPublicKey []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// PublicKey is the publicKey argument value.
			PublicKey string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetUserByName holds details about calls to the GetUserByName method.
		GetUserByName []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// Name is the name argument value.
			Name string
		}
		// Transaction holds details about calls to the Transaction method.
		Transaction []struct {
			// Fn is the fn argument value.
			Fn func(tx *gorm.DB) error
		}
		// UpdateMatrixUser holds details about calls to the UpdateMatrixUser method.
		UpdateMatrixUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// MatrixUser is the matrixUser argument value.
			MatrixUser *MatrixUser
		}
		// UpdateMenu holds details about calls to the UpdateMenu method.
		UpdateMenu []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// Menu is the menu argument value.
			Menu *Menu
		}
		// UpdateOrder holds details about calls to the UpdateOrder method.
		UpdateOrder []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// CurrentUser is the currentUser argument value.
			CurrentUser *uuid.UUID
			// Order is the order argument value.
			Order *Order
		}
		// UpdateOrderItem holds details about calls to the UpdateOrderItem method.
		UpdateOrderItem []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// OrderItemUuid is the orderItemUuid argument value.
			OrderItemUuid *uuid.UUID
			// UserUuid is the userUuid argument value.
			UserUuid *uuid.UUID
			// OrderItem is the orderItem argument value.
			OrderItem *OrderItem
		}
		// UpdatePasswordUser holds details about calls to the UpdatePasswordUser method.
		UpdatePasswordUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// PasswordUser is the passwordUser argument value.
			PasswordUser *PasswordUser
		}
		// UpdateSshUser holds details about calls to the UpdateSshUser method.
		UpdateSshUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// SshUser is the sshUser argument value.
			SshUser *SshUser
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Tx is the tx argument value.
			Tx *gorm.DB
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// User is the user argument value.
			User *User
		}
	}
	lockCreateMatrixUser                sync.RWMutex
	lockCreateMenu                      sync.RWMutex
	lockCreateMenuItem                  sync.RWMutex
	lockCreateOrder                     sync.RWMutex
	lockCreateOrderItem                 sync.RWMutex
	lockCreatePasswordUser              sync.RWMutex
	lockCreateSshUser                   sync.RWMutex
	lockCreateUser                      sync.RWMutex
	lockDeleteMatrixUser                sync.RWMutex
	lockDeleteMenu                      sync.RWMutex
	lockDeleteMenuItem                  sync.RWMutex
	lockDeleteOrder                     sync.RWMutex
	lockDeleteOrderItem                 sync.RWMutex
	lockDeletePasswordUser              sync.RWMutex
	lockDeleteSshUser                   sync.RWMutex
	lockDeleteUser                      sync.RWMutex
	lockFindPasswordUser                sync.RWMutex
	lockGetActiveOrderByMenu            sync.RWMutex
	lockGetActiveOrderByMenuName        sync.RWMutex
	lockGetAllMatrixUsers               sync.RWMutex
	lockGetAllMenus                     sync.RWMutex
	lockGetAllOrderItems                sync.RWMutex
	lockGetAllOrderItemsForOrderAndUser sync.RWMutex
	lockGetAllOrders                    sync.RWMutex
	lockGetAllPasswordUsers             sync.RWMutex
	lockGetAllSshUsers                  sync.RWMutex
	lockGetAllUsers                     sync.RWMutex
	lockGetMatrixUser                   sync.RWMutex
	lockGetMatrixUserByUsername         sync.RWMutex
	lockGetMenu                         sync.RWMutex
	lockGetMenuByName                   sync.RWMutex
	lockGetMenuItem                     sync.RWMutex
	lockGetMenuItemByShortName          sync.RWMutex
	lockGetOrder                        sync.RWMutex
	lockGetOrderItem                    sync.RWMutex
	lockGetPasswordUser                 sync.RWMutex
	lockGetSshUser                      sync.RWMutex
	lockGetSshUserByPublicKey           sync.RWMutex
	lockGetUser                         sync.RWMutex
	lockGetUserByName                   sync.RWMutex
	lockTransaction                     sync.RWMutex
	lockUpdateMatrixUser                sync.RWMutex
	lockUpdateMenu                      sync.RWMutex
	lockUpdateOrder                     sync.RWMutex
	lockUpdateOrderItem                 sync.RWMutex
	lockUpdatePasswordUser              sync.RWMutex
	lockUpdateSshUser                   sync.RWMutex
	lockUpdateUser                      sync.RWMutex
}

// CreateMatrixUser calls CreateMatrixUserFunc.
func (mock *RepositoryMock) CreateMatrixUser(tx *gorm.DB, matrixUser *MatrixUser) (*MatrixUser, error) {
	if mock.CreateMatrixUserFunc == nil {
		panic("RepositoryMock.CreateMatrixUserFunc: method is nil but Repository.CreateMatrixUser was just called")
	}
	callInfo := struct {
		Tx         *gorm.DB
		MatrixUser *MatrixUser
	}{
		Tx:         tx,
		MatrixUser: matrixUser,
	}
	mock.lockCreateMatrixUser.Lock()
	mock.calls.CreateMatrixUser = append(mock.calls.CreateMatrixUser, callInfo)
	mock.lockCreateMatrixUser.Unlock()
	return mock.CreateMatrixUserFunc(tx, matrixUser)
}

// CreateMatrixUserCalls gets all the calls that were made to CreateMatrixUser.
// Check the length with:
//
//	len(mockedRepository.CreateMatrixUserCalls())
func (mock *RepositoryMock) CreateMatrixUserCalls() []struct {
	Tx         *gorm.DB
	MatrixUser *MatrixUser
} {
	var calls []struct {
		Tx         *gorm.DB
		MatrixUser *MatrixUser
	}
	mock.lockCreateMatrixUser.RLock()
	calls = mock.calls.CreateMatrixUser
	mock.lockCreateMatrixUser.RUnlock()
	return calls
}

// CreateMenu calls CreateMenuFunc.
func (mock *RepositoryMock) CreateMenu(tx *gorm.DB, menu *Menu) (*Menu, error) {
	if mock.CreateMenuFunc == nil {
		panic("RepositoryMock.CreateMenuFunc: method is nil but Repository.CreateMenu was just called")
	}
	callInfo := struct {
		Tx   *gorm.DB
		Menu *Menu
	}{
		Tx:   tx,
		Menu: menu,
	}
	mock.lockCreateMenu.Lock()
	mock.calls.CreateMenu = append(mock.calls.CreateMenu, callInfo)
	mock.lockCreateMenu.Unlock()
	return mock.CreateMenuFunc(tx, menu)
}

// CreateMenuCalls gets all the calls that were made to CreateMenu.
// Check the length with:
//
//	len(mockedRepository.CreateMenuCalls())
func (mock *RepositoryMock) CreateMenuCalls() []struct {
	Tx   *gorm.DB
	Menu *Menu
} {
	var calls []struct {
		Tx   *gorm.DB
		Menu *Menu
	}
	mock.lockCreateMenu.RLock()
	calls = mock.calls.CreateMenu
	mock.lockCreateMenu.RUnlock()
	return calls
}

// CreateMenuItem calls CreateMenuItemFunc.
func (mock *RepositoryMock) CreateMenuItem(tx *gorm.DB, menuItem *MenuItem) (*MenuItem, error) {
	if mock.CreateMenuItemFunc == nil {
		panic("RepositoryMock.CreateMenuItemFunc: method is nil but Repository.CreateMenuItem was just called")
	}
	callInfo := struct {
		Tx       *gorm.DB
		MenuItem *MenuItem
	}{
		Tx:       tx,
		MenuItem: menuItem,
	}
	mock.lockCreateMenuItem.Lock()
	mock.calls.CreateMenuItem = append(mock.calls.CreateMenuItem, callInfo)
	mock.lockCreateMenuItem.Unlock()
	return mock.CreateMenuItemFunc(tx, menuItem)
}

// CreateMenuItemCalls gets all the calls that were made to CreateMenuItem.
// Check the length with:
//
//	len(mockedRepository.CreateMenuItemCalls())
func (mock *RepositoryMock) CreateMenuItemCalls() []struct {
	Tx       *gorm.DB
	MenuItem *MenuItem
} {
	var calls []struct {
		Tx       *gorm.DB
		MenuItem *MenuItem
	}
	mock.lockCreateMenuItem.RLock()
	calls = mock.calls.CreateMenuItem
	mock.lockCreateMenuItem.RUnlock()
	return calls
}

// CreateOrder calls CreateOrderFunc.
func (mock *RepositoryMock) CreateOrder(tx *gorm.DB, order *Order) (*Order, error) {
	if mock.CreateOrderFunc == nil {
		panic("RepositoryMock.CreateOrderFunc: method is nil but Repository.CreateOrder was just called")
	}
	callInfo := struct {
		Tx    *gorm.DB
		Order *Order
	}{
		Tx:    tx,
		Order: order,
	}
	mock.lockCreateOrder.Lock()
	mock.calls.CreateOrder = append(mock.calls.CreateOrder, callInfo)
	mock.lockCreateOrder.Unlock()
	return mock.CreateOrderFunc(tx, order)
}

// CreateOrderCalls gets all the calls that were made to CreateOrder.
// Check the length with:
//
//	len(mockedRepository.CreateOrderCalls())
func (mock *RepositoryMock) CreateOrderCalls() []struct {
	Tx    *gorm.DB
	Order *Order
} {
	var calls []struct {
		Tx    *gorm.DB
		Order *Order
	}
	mock.lockCreateOrder.RLock()
	calls = mock.calls.CreateOrder
	mock.lockCreateOrder.RUnlock()
	return calls
}

// CreateOrderItem calls CreateOrderItemFunc.
func (mock *RepositoryMock) CreateOrderItem(tx *gorm.DB, uuidMoqParam *uuid.UUID, orderItem *OrderItem) (*OrderItem, error) {
	if mock.CreateOrderItemFunc == nil {
		panic("RepositoryMock.CreateOrderItemFunc: method is nil but Repository.CreateOrderItem was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		OrderItem    *OrderItem
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		OrderItem:    orderItem,
	}
	mock.lockCreateOrderItem.Lock()
	mock.calls.CreateOrderItem = append(mock.calls.CreateOrderItem, callInfo)
	mock.lockCreateOrderItem.Unlock()
	return mock.CreateOrderItemFunc(tx, uuidMoqParam, orderItem)
}

// CreateOrderItemCalls gets all the calls that were made to CreateOrderItem.
// Check the length with:
//
//	len(mockedRepository.CreateOrderItemCalls())
func (mock *RepositoryMock) CreateOrderItemCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	OrderItem    *OrderItem
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		OrderItem    *OrderItem
	}
	mock.lockCreateOrderItem.RLock()
	calls = mock.calls.CreateOrderItem
	mock.lockCreateOrderItem.RUnlock()
	return calls
}

// CreatePasswordUser calls CreatePasswordUserFunc.
func (mock *RepositoryMock) CreatePasswordUser(tx *gorm.DB, passwordUser *PasswordUser) (*PasswordUser, error) {
	if mock.CreatePasswordUserFunc == nil {
		panic("RepositoryMock.CreatePasswordUserFunc: method is nil but Repository.CreatePasswordUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		PasswordUser *PasswordUser
	}{
		Tx:           tx,
		PasswordUser: passwordUser,
	}
	mock.lockCreatePasswordUser.Lock()
	mock.calls.CreatePasswordUser = append(mock.calls.CreatePasswordUser, callInfo)
	mock.lockCreatePasswordUser.Unlock()
	return mock.CreatePasswordUserFunc(tx, passwordUser)
}

// CreatePasswordUserCalls gets all the calls that were made to CreatePasswordUser.
// Check the length with:
//
//	len(mockedRepository.CreatePasswordUserCalls())
func (mock *RepositoryMock) CreatePasswordUserCalls() []struct {
	Tx           *gorm.DB
	PasswordUser *PasswordUser
} {
	var calls []struct {
		Tx           *gorm.DB
		PasswordUser *PasswordUser
	}
	mock.lockCreatePasswordUser.RLock()
	calls = mock.calls.CreatePasswordUser
	mock.lockCreatePasswordUser.RUnlock()
	return calls
}

// CreateSshUser calls CreateSshUserFunc.
func (mock *RepositoryMock) CreateSshUser(tx *gorm.DB, sshUser *SshUser) (*SshUser, error) {
	if mock.CreateSshUserFunc == nil {
		panic("RepositoryMock.CreateSshUserFunc: method is nil but Repository.CreateSshUser was just called")
	}
	callInfo := struct {
		Tx      *gorm.DB
		SshUser *SshUser
	}{
		Tx:      tx,
		SshUser: sshUser,
	}
	mock.lockCreateSshUser.Lock()
	mock.calls.CreateSshUser = append(mock.calls.CreateSshUser, callInfo)
	mock.lockCreateSshUser.Unlock()
	return mock.CreateSshUserFunc(tx, sshUser)
}

// CreateSshUserCalls gets all the calls that were made to CreateSshUser.
// Check the length with:
//
//	len(mockedRepository.CreateSshUserCalls())
func (mock *RepositoryMock) CreateSshUserCalls() []struct {
	Tx      *gorm.DB
	SshUser *SshUser
} {
	var calls []struct {
		Tx      *gorm.DB
		SshUser *SshUser
	}
	mock.lockCreateSshUser.RLock()
	calls = mock.calls.CreateSshUser
	mock.lockCreateSshUser.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *RepositoryMock) CreateUser(tx *gorm.DB, user *User) (*User, error) {
	if mock.CreateUserFunc == nil {
		panic("RepositoryMock.CreateUserFunc: method is nil but Repository.CreateUser was just called")
	}
	callInfo := struct {
		Tx   *gorm.DB
		User *User
	}{
		Tx:   tx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(tx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedRepository.CreateUserCalls())
func (mock *RepositoryMock) CreateUserCalls() []struct {
	Tx   *gorm.DB
	User *User
} {
	var calls []struct {
		Tx   *gorm.DB
		User *User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteMatrixUser calls DeleteMatrixUserFunc.
func (mock *RepositoryMock) DeleteMatrixUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteMatrixUserFunc == nil {
		panic("RepositoryMock.DeleteMatrixUserFunc: method is nil but Repository.DeleteMatrixUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteMatrixUser.Lock()
	mock.calls.DeleteMatrixUser = append(mock.calls.DeleteMatrixUser, callInfo)
	mock.lockDeleteMatrixUser.Unlock()
	return mock.DeleteMatrixUserFunc(tx, uuidMoqParam)
}

// DeleteMatrixUserCalls gets all the calls that were made to DeleteMatrixUser.
// Check the length with:
//
//	len(mockedRepository.DeleteMatrixUserCalls())
func (mock *RepositoryMock) DeleteMatrixUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteMatrixUser.RLock()
	calls = mock.calls.DeleteMatrixUser
	mock.lockDeleteMatrixUser.RUnlock()
	return calls
}

// DeleteMenu calls DeleteMenuFunc.
func (mock *RepositoryMock) DeleteMenu(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteMenuFunc == nil {
		panic("RepositoryMock.DeleteMenuFunc: method is nil but Repository.DeleteMenu was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteMenu.Lock()
	mock.calls.DeleteMenu = append(mock.calls.DeleteMenu, callInfo)
	mock.lockDeleteMenu.Unlock()
	return mock.DeleteMenuFunc(tx, uuidMoqParam)
}

// DeleteMenuCalls gets all the calls that were made to DeleteMenu.
// Check the length with:
//
//	len(mockedRepository.DeleteMenuCalls())
func (mock *RepositoryMock) DeleteMenuCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteMenu.RLock()
	calls = mock.calls.DeleteMenu
	mock.lockDeleteMenu.RUnlock()
	return calls
}

// DeleteMenuItem calls DeleteMenuItemFunc.
func (mock *RepositoryMock) DeleteMenuItem(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteMenuItemFunc == nil {
		panic("RepositoryMock.DeleteMenuItemFunc: method is nil but Repository.DeleteMenuItem was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteMenuItem.Lock()
	mock.calls.DeleteMenuItem = append(mock.calls.DeleteMenuItem, callInfo)
	mock.lockDeleteMenuItem.Unlock()
	return mock.DeleteMenuItemFunc(tx, uuidMoqParam)
}

// DeleteMenuItemCalls gets all the calls that were made to DeleteMenuItem.
// Check the length with:
//
//	len(mockedRepository.DeleteMenuItemCalls())
func (mock *RepositoryMock) DeleteMenuItemCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteMenuItem.RLock()
	calls = mock.calls.DeleteMenuItem
	mock.lockDeleteMenuItem.RUnlock()
	return calls
}

// DeleteOrder calls DeleteOrderFunc.
func (mock *RepositoryMock) DeleteOrder(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteOrderFunc == nil {
		panic("RepositoryMock.DeleteOrderFunc: method is nil but Repository.DeleteOrder was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteOrder.Lock()
	mock.calls.DeleteOrder = append(mock.calls.DeleteOrder, callInfo)
	mock.lockDeleteOrder.Unlock()
	return mock.DeleteOrderFunc(tx, uuidMoqParam)
}

// DeleteOrderCalls gets all the calls that were made to DeleteOrder.
// Check the length with:
//
//	len(mockedRepository.DeleteOrderCalls())
func (mock *RepositoryMock) DeleteOrderCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteOrder.RLock()
	calls = mock.calls.DeleteOrder
	mock.lockDeleteOrder.RUnlock()
	return calls
}

// DeleteOrderItem calls DeleteOrderItemFunc.
func (mock *RepositoryMock) DeleteOrderItem(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteOrderItemFunc == nil {
		panic("RepositoryMock.DeleteOrderItemFunc: method is nil but Repository.DeleteOrderItem was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteOrderItem.Lock()
	mock.calls.DeleteOrderItem = append(mock.calls.DeleteOrderItem, callInfo)
	mock.lockDeleteOrderItem.Unlock()
	return mock.DeleteOrderItemFunc(tx, uuidMoqParam)
}

// DeleteOrderItemCalls gets all the calls that were made to DeleteOrderItem.
// Check the length with:
//
//	len(mockedRepository.DeleteOrderItemCalls())
func (mock *RepositoryMock) DeleteOrderItemCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteOrderItem.RLock()
	calls = mock.calls.DeleteOrderItem
	mock.lockDeleteOrderItem.RUnlock()
	return calls
}

// DeletePasswordUser calls DeletePasswordUserFunc.
func (mock *RepositoryMock) DeletePasswordUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeletePasswordUserFunc == nil {
		panic("RepositoryMock.DeletePasswordUserFunc: method is nil but Repository.DeletePasswordUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeletePasswordUser.Lock()
	mock.calls.DeletePasswordUser = append(mock.calls.DeletePasswordUser, callInfo)
	mock.lockDeletePasswordUser.Unlock()
	return mock.DeletePasswordUserFunc(tx, uuidMoqParam)
}

// DeletePasswordUserCalls gets all the calls that were made to DeletePasswordUser.
// Check the length with:
//
//	len(mockedRepository.DeletePasswordUserCalls())
func (mock *RepositoryMock) DeletePasswordUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeletePasswordUser.RLock()
	calls = mock.calls.DeletePasswordUser
	mock.lockDeletePasswordUser.RUnlock()
	return calls
}

// DeleteSshUser calls DeleteSshUserFunc.
func (mock *RepositoryMock) DeleteSshUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteSshUserFunc == nil {
		panic("RepositoryMock.DeleteSshUserFunc: method is nil but Repository.DeleteSshUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteSshUser.Lock()
	mock.calls.DeleteSshUser = append(mock.calls.DeleteSshUser, callInfo)
	mock.lockDeleteSshUser.Unlock()
	return mock.DeleteSshUserFunc(tx, uuidMoqParam)
}

// DeleteSshUserCalls gets all the calls that were made to DeleteSshUser.
// Check the length with:
//
//	len(mockedRepository.DeleteSshUserCalls())
func (mock *RepositoryMock) DeleteSshUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteSshUser.RLock()
	calls = mock.calls.DeleteSshUser
	mock.lockDeleteSshUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *RepositoryMock) DeleteUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("RepositoryMock.DeleteUserFunc: method is nil but Repository.DeleteUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(tx, uuidMoqParam)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedRepository.DeleteUserCalls())
func (mock *RepositoryMock) DeleteUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// FindPasswordUser calls FindPasswordUserFunc.
func (mock *RepositoryMock) FindPasswordUser(tx *gorm.DB, username string) (*PasswordUser, error) {
	if mock.FindPasswordUserFunc == nil {
		panic("RepositoryMock.FindPasswordUserFunc: method is nil but Repository.FindPasswordUser was just called")
	}
	callInfo := struct {
		Tx       *gorm.DB
		Username string
	}{
		Tx:       tx,
		Username: username,
	}
	mock.lockFindPasswordUser.Lock()
	mock.calls.FindPasswordUser = append(mock.calls.FindPasswordUser, callInfo)
	mock.lockFindPasswordUser.Unlock()
	return mock.FindPasswordUserFunc(tx, username)
}

// FindPasswordUserCalls gets all the calls that were made to FindPasswordUser.
// Check the length with:
//
//	len(mockedRepository.FindPasswordUserCalls())
func (mock *RepositoryMock) FindPasswordUserCalls() []struct {
	Tx       *gorm.DB
	Username string
} {
	var calls []struct {
		Tx       *gorm.DB
		Username string
	}
	mock.lockFindPasswordUser.RLock()
	calls = mock.calls.FindPasswordUser
	mock.lockFindPasswordUser.RUnlock()
	return calls
}

// GetActiveOrderByMenu calls GetActiveOrderByMenuFunc.
func (mock *RepositoryMock) GetActiveOrderByMenu(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error) {
	if mock.GetActiveOrderByMenuFunc == nil {
		panic("RepositoryMock.GetActiveOrderByMenuFunc: method is nil but Repository.GetActiveOrderByMenu was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetActiveOrderByMenu.Lock()
	mock.calls.GetActiveOrderByMenu = append(mock.calls.GetActiveOrderByMenu, callInfo)
	mock.lockGetActiveOrderByMenu.Unlock()
	return mock.GetActiveOrderByMenuFunc(tx, uuidMoqParam)
}

// GetActiveOrderByMenuCalls gets all the calls that were made to GetActiveOrderByMenu.
// Check the length with:
//
//	len(mockedRepository.GetActiveOrderByMenuCalls())
func (mock *RepositoryMock) GetActiveOrderByMenuCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetActiveOrderByMenu.RLock()
	calls = mock.calls.GetActiveOrderByMenu
	mock.lockGetActiveOrderByMenu.RUnlock()
	return calls
}

// GetActiveOrderByMenuName calls GetActiveOrderByMenuNameFunc.
func (mock *RepositoryMock) GetActiveOrderByMenuName(tx *gorm.DB, name string) (*Order, error) {
	if mock.GetActiveOrderByMenuNameFunc == nil {
		panic("RepositoryMock.GetActiveOrderByMenuNameFunc: method is nil but Repository.GetActiveOrderByMenuName was just called")
	}
	callInfo := struct {
		Tx   *gorm.DB
		Name string
	}{
		Tx:   tx,
		Name: name,
	}
	mock.lockGetActiveOrderByMenuName.Lock()
	mock.calls.GetActiveOrderByMenuName = append(mock.calls.GetActiveOrderByMenuName, callInfo)
	mock.lockGetActiveOrderByMenuName.Unlock()
	return mock.GetActiveOrderByMenuNameFunc(tx, name)
}

// GetActiveOrderByMenuNameCalls gets all the calls that were made to GetActiveOrderByMenuName.
// Check the length with:
//
//	len(mockedRepository.GetActiveOrderByMenuNameCalls())
func (mock *RepositoryMock) GetActiveOrderByMenuNameCalls() []struct {
	Tx   *gorm.DB
	Name string
} {
	var calls []struct {
		Tx   *gorm.DB
		Name string
	}
	mock.lockGetActiveOrderByMenuName.RLock()
	calls = mock.calls.GetActiveOrderByMenuName
	mock.lockGetActiveOrderByMenuName.RUnlock()
	return calls
}

// GetAllMatrixUsers calls GetAllMatrixUsersFunc.
func (mock *RepositoryMock) GetAllMatrixUsers(tx *gorm.DB) ([]MatrixUser, error) {
	if mock.GetAllMatrixUsersFunc == nil {
		panic("RepositoryMock.GetAllMatrixUsersFunc: method is nil but Repository.GetAllMatrixUsers was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllMatrixUsers.Lock()
	mock.calls.GetAllMatrixUsers = append(mock.calls.GetAllMatrixUsers, callInfo)
	mock.lockGetAllMatrixUsers.Unlock()
	return mock.GetAllMatrixUsersFunc(tx)
}

// GetAllMatrixUsersCalls gets all the calls that were made to GetAllMatrixUsers.
// Check the length with:
//
//	len(mockedRepository.GetAllMatrixUsersCalls())
func (mock *RepositoryMock) GetAllMatrixUsersCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllMatrixUsers.RLock()
	calls = mock.calls.GetAllMatrixUsers
	mock.lockGetAllMatrixUsers.RUnlock()
	return calls
}

// GetAllMenus calls GetAllMenusFunc.
func (mock *RepositoryMock) GetAllMenus(tx *gorm.DB) ([]Menu, error) {
	if mock.GetAllMenusFunc == nil {
		panic("RepositoryMock.GetAllMenusFunc: method is nil but Repository.GetAllMenus was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllMenus.Lock()
	mock.calls.GetAllMenus = append(mock.calls.GetAllMenus, callInfo)
	mock.lockGetAllMenus.Unlock()
	return mock.GetAllMenusFunc(tx)
}

// GetAllMenusCalls gets all the calls that were made to GetAllMenus.
// Check the length with:
//
//	len(mockedRepository.GetAllMenusCalls())
func (mock *RepositoryMock) GetAllMenusCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllMenus.RLock()
	calls = mock.calls.GetAllMenus
	mock.lockGetAllMenus.RUnlock()
	return calls
}

// GetAllOrderItems calls GetAllOrderItemsFunc.
func (mock *RepositoryMock) GetAllOrderItems(tx *gorm.DB, uuidMoqParam *uuid.UUID) ([]OrderItem, error) {
	if mock.GetAllOrderItemsFunc == nil {
		panic("RepositoryMock.GetAllOrderItemsFunc: method is nil but Repository.GetAllOrderItems was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetAllOrderItems.Lock()
	mock.calls.GetAllOrderItems = append(mock.calls.GetAllOrderItems, callInfo)
	mock.lockGetAllOrderItems.Unlock()
	return mock.GetAllOrderItemsFunc(tx, uuidMoqParam)
}

// GetAllOrderItemsCalls gets all the calls that were made to GetAllOrderItems.
// Check the length with:
//
//	len(mockedRepository.GetAllOrderItemsCalls())
func (mock *RepositoryMock) GetAllOrderItemsCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetAllOrderItems.RLock()
	calls = mock.calls.GetAllOrderItems
	mock.lockGetAllOrderItems.RUnlock()
	return calls
}

// GetAllOrderItemsForOrderAndUser calls GetAllOrderItemsForOrderAndUserFunc.
func (mock *RepositoryMock) GetAllOrderItemsForOrderAndUser(tx *gorm.DB, orderUuid *uuid.UUID, userUuid *uuid.UUID) ([]OrderItem, error) {
	if mock.GetAllOrderItemsForOrderAndUserFunc == nil {
		panic("RepositoryMock.GetAllOrderItemsForOrderAndUserFunc: method is nil but Repository.GetAllOrderItemsForOrderAndUser was just called")
	}
	callInfo := struct {
		Tx        *gorm.DB
		OrderUuid *uuid.UUID
		UserUuid  *uuid.UUID
	}{
		Tx:        tx,
		OrderUuid: orderUuid,
		UserUuid:  userUuid,
	}
	mock.lockGetAllOrderItemsForOrderAndUser.Lock()
	mock.calls.GetAllOrderItemsForOrderAndUser = append(mock.calls.GetAllOrderItemsForOrderAndUser, callInfo)
	mock.lockGetAllOrderItemsForOrderAndUser.Unlock()
	return mock.GetAllOrderItemsForOrderAndUserFunc(tx, orderUuid, userUuid)
}

// GetAllOrderItemsForOrderAndUserCalls gets all the calls that were made to GetAllOrderItemsForOrderAndUser.
// Check the length with:
//
//	len(mockedRepository.GetAllOrderItemsForOrderAndUserCalls())
func (mock *RepositoryMock) GetAllOrderItemsForOrderAndUserCalls() []struct {
	Tx        *gorm.DB
	OrderUuid *uuid.UUID
	UserUuid  *uuid.UUID
} {
	var calls []struct {
		Tx        *gorm.DB
		OrderUuid *uuid.UUID
		UserUuid  *uuid.UUID
	}
	mock.lockGetAllOrderItemsForOrderAndUser.RLock()
	calls = mock.calls.GetAllOrderItemsForOrderAndUser
	mock.lockGetAllOrderItemsForOrderAndUser.RUnlock()
	return calls
}

// GetAllOrders calls GetAllOrdersFunc.
func (mock *RepositoryMock) GetAllOrders(tx *gorm.DB) ([]Order, error) {
	if mock.GetAllOrdersFunc == nil {
		panic("RepositoryMock.GetAllOrdersFunc: method is nil but Repository.GetAllOrders was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllOrders.Lock()
	mock.calls.GetAllOrders = append(mock.calls.GetAllOrders, callInfo)
	mock.lockGetAllOrders.Unlock()
	return mock.GetAllOrdersFunc(tx)
}

// GetAllOrdersCalls gets all the calls that were made to GetAllOrders.
// Check the length with:
//
//	len(mockedRepository.GetAllOrdersCalls())
func (mock *RepositoryMock) GetAllOrdersCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllOrders.RLock()
	calls = mock.calls.GetAllOrders
	mock.lockGetAllOrders.RUnlock()
	return calls
}

// GetAllPasswordUsers calls GetAllPasswordUsersFunc.
func (mock *RepositoryMock) GetAllPasswordUsers(tx *gorm.DB) ([]PasswordUser, error) {
	if mock.GetAllPasswordUsersFunc == nil {
		panic("RepositoryMock.GetAllPasswordUsersFunc: method is nil but Repository.GetAllPasswordUsers was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllPasswordUsers.Lock()
	mock.calls.GetAllPasswordUsers = append(mock.calls.GetAllPasswordUsers, callInfo)
	mock.lockGetAllPasswordUsers.Unlock()
	return mock.GetAllPasswordUsersFunc(tx)
}

// GetAllPasswordUsersCalls gets all the calls that were made to GetAllPasswordUsers.
// Check the length with:
//
//	len(mockedRepository.GetAllPasswordUsersCalls())
func (mock *RepositoryMock) GetAllPasswordUsersCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllPasswordUsers.RLock()
	calls = mock.calls.GetAllPasswordUsers
	mock.lockGetAllPasswordUsers.RUnlock()
	return calls
}

// GetAllSshUsers calls GetAllSshUsersFunc.
func (mock *RepositoryMock) GetAllSshUsers(tx *gorm.DB) ([]SshUser, error) {
	if mock.GetAllSshUsersFunc == nil {
		panic("RepositoryMock.GetAllSshUsersFunc: method is nil but Repository.GetAllSshUsers was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllSshUsers.Lock()
	mock.calls.GetAllSshUsers = append(mock.calls.GetAllSshUsers, callInfo)
	mock.lockGetAllSshUsers.Unlock()
	return mock.GetAllSshUsersFunc(tx)
}

// GetAllSshUsersCalls gets all the calls that were made to GetAllSshUsers.
// Check the length with:
//
//	len(mockedRepository.GetAllSshUsersCalls())
func (mock *RepositoryMock) GetAllSshUsersCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllSshUsers.RLock()
	calls = mock.calls.GetAllSshUsers
	mock.lockGetAllSshUsers.RUnlock()
	return calls
}

// GetAllUsers calls GetAllUsersFunc.
func (mock *RepositoryMock) GetAllUsers(tx *gorm.DB) ([]User, error) {
	if mock.GetAllUsersFunc == nil {
		panic("RepositoryMock.GetAllUsersFunc: method is nil but Repository.GetAllUsers was just called")
	}
	callInfo := struct {
		Tx *gorm.DB
	}{
		Tx: tx,
	}
	mock.lockGetAllUsers.Lock()
	mock.calls.GetAllUsers = append(mock.calls.GetAllUsers, callInfo)
	mock.lockGetAllUsers.Unlock()
	return mock.GetAllUsersFunc(tx)
}

// GetAllUsersCalls gets all the calls that were made to GetAllUsers.
// Check the length with:
//
//	len(mockedRepository.GetAllUsersCalls())
func (mock *RepositoryMock) GetAllUsersCalls() []struct {
	Tx *gorm.DB
} {
	var calls []struct {
		Tx *gorm.DB
	}
	mock.lockGetAllUsers.RLock()
	calls = mock.calls.GetAllUsers
	mock.lockGetAllUsers.RUnlock()
	return calls
}

// GetMatrixUser calls GetMatrixUserFunc.
func (mock *RepositoryMock) GetMatrixUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MatrixUser, error) {
	if mock.GetMatrixUserFunc == nil {
		panic("RepositoryMock.GetMatrixUserFunc: method is nil but Repository.GetMatrixUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetMatrixUser.Lock()
	mock.calls.GetMatrixUser = append(mock.calls.GetMatrixUser, callInfo)
	mock.lockGetMatrixUser.Unlock()
	return mock.GetMatrixUserFunc(tx, uuidMoqParam)
}

// GetMatrixUserCalls gets all the calls that were made to GetMatrixUser.
// Check the length with:
//
//	len(mockedRepository.GetMatrixUserCalls())
func (mock *RepositoryMock) GetMatrixUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetMatrixUser.RLock()
	calls = mock.calls.GetMatrixUser
	mock.lockGetMatrixUser.RUnlock()
	return calls
}

// GetMatrixUserByUsername calls GetMatrixUserByUsernameFunc.
func (mock *RepositoryMock) GetMatrixUserByUsername(tx *gorm.DB, username string) (*MatrixUser, error) {
	if mock.GetMatrixUserByUsernameFunc == nil {
		panic("RepositoryMock.GetMatrixUserByUsernameFunc: method is nil but Repository.GetMatrixUserByUsername was just called")
	}
	callInfo := struct {
		Tx       *gorm.DB
		Username string
	}{
		Tx:       tx,
		Username: username,
	}
	mock.lockGetMatrixUserByUsername.Lock()
	mock.calls.GetMatrixUserByUsername = append(mock.calls.GetMatrixUserByUsername, callInfo)
	mock.lockGetMatrixUserByUsername.Unlock()
	return mock.GetMatrixUserByUsernameFunc(tx, username)
}

// GetMatrixUserByUsernameCalls gets all the calls that were made to GetMatrixUserByUsername.
// Check the length with:
//
//	len(mockedRepository.GetMatrixUserByUsernameCalls())
func (mock *RepositoryMock) GetMatrixUserByUsernameCalls() []struct {
	Tx       *gorm.DB
	Username string
} {
	var calls []struct {
		Tx       *gorm.DB
		Username string
	}
	mock.lockGetMatrixUserByUsername.RLock()
	calls = mock.calls.GetMatrixUserByUsername
	mock.lockGetMatrixUserByUsername.RUnlock()
	return calls
}

// GetMenu calls GetMenuFunc.
func (mock *RepositoryMock) GetMenu(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Menu, error) {
	if mock.GetMenuFunc == nil {
		panic("RepositoryMock.GetMenuFunc: method is nil but Repository.GetMenu was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetMenu.Lock()
	mock.calls.GetMenu = append(mock.calls.GetMenu, callInfo)
	mock.lockGetMenu.Unlock()
	return mock.GetMenuFunc(tx, uuidMoqParam)
}

// GetMenuCalls gets all the calls that were made to GetMenu.
// Check the length with:
//
//	len(mockedRepository.GetMenuCalls())
func (mock *RepositoryMock) GetMenuCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetMenu.RLock()
	calls = mock.calls.GetMenu
	mock.lockGetMenu.RUnlock()
	return calls
}

// GetMenuByName calls GetMenuByNameFunc.
func (mock *RepositoryMock) GetMenuByName(tx *gorm.DB, name string) (*Menu, error) {
	if mock.GetMenuByNameFunc == nil {
		panic("RepositoryMock.GetMenuByNameFunc: method is nil but Repository.GetMenuByName was just called")
	}
	callInfo := struct {
		Tx   *gorm.DB
		Name string
	}{
		Tx:   tx,
		Name: name,
	}
	mock.lockGetMenuByName.Lock()
	mock.calls.GetMenuByName = append(mock.calls.GetMenuByName, callInfo)
	mock.lockGetMenuByName.Unlock()
	return mock.GetMenuByNameFunc(tx, name)
}

// GetMenuByNameCalls gets all the calls that were made to GetMenuByName.
// Check the length with:
//
//	len(mockedRepository.GetMenuByNameCalls())
func (mock *RepositoryMock) GetMenuByNameCalls() []struct {
	Tx   *gorm.DB
	Name string
} {
	var calls []struct {
		Tx   *gorm.DB
		Name string
	}
	mock.lockGetMenuByName.RLock()
	calls = mock.calls.GetMenuByName
	mock.lockGetMenuByName.RUnlock()
	return calls
}

// GetMenuItem calls GetMenuItemFunc.
func (mock *RepositoryMock) GetMenuItem(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*MenuItem, error) {
	if mock.GetMenuItemFunc == nil {
		panic("RepositoryMock.GetMenuItemFunc: method is nil but Repository.GetMenuItem was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetMenuItem.Lock()
	mock.calls.GetMenuItem = append(mock.calls.GetMenuItem, callInfo)
	mock.lockGetMenuItem.Unlock()
	return mock.GetMenuItemFunc(tx, uuidMoqParam)
}

// GetMenuItemCalls gets all the calls that were made to GetMenuItem.
// Check the length with:
//
//	len(mockedRepository.GetMenuItemCalls())
func (mock *RepositoryMock) GetMenuItemCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetMenuItem.RLock()
	calls = mock.calls.GetMenuItem
	mock.lockGetMenuItem.RUnlock()
	return calls
}

// GetMenuItemByShortName calls GetMenuItemByShortNameFunc.
func (mock *RepositoryMock) GetMenuItemByShortName(tx *gorm.DB, menuUuid *uuid.UUID, shortName string) (*MenuItem, error) {
	if mock.GetMenuItemByShortNameFunc == nil {
		panic("RepositoryMock.GetMenuItemByShortNameFunc: method is nil but Repository.GetMenuItemByShortName was just called")
	}
	callInfo := struct {
		Tx        *gorm.DB
		MenuUuid  *uuid.UUID
		ShortName string
	}{
		Tx:        tx,
		MenuUuid:  menuUuid,
		ShortName: shortName,
	}
	mock.lockGetMenuItemByShortName.Lock()
	mock.calls.GetMenuItemByShortName = append(mock.calls.GetMenuItemByShortName, callInfo)
	mock.lockGetMenuItemByShortName.Unlock()
	return mock.GetMenuItemByShortNameFunc(tx, menuUuid, shortName)
}

// GetMenuItemByShortNameCalls gets all the calls that were made to GetMenuItemByShortName.
// Check the length with:
//
//	len(mockedRepository.GetMenuItemByShortNameCalls())
func (mock *RepositoryMock) GetMenuItemByShortNameCalls() []struct {
	Tx        *gorm.DB
	MenuUuid  *uuid.UUID
	ShortName string
} {
	var calls []struct {
		Tx        *gorm.DB
		MenuUuid  *uuid.UUID
		ShortName string
	}
	mock.lockGetMenuItemByShortName.RLock()
	calls = mock.calls.GetMenuItemByShortName
	mock.lockGetMenuItemByShortName.RUnlock()
	return calls
}

// GetOrder calls GetOrderFunc.
func (mock *RepositoryMock) GetOrder(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*Order, error) {
	if mock.GetOrderFunc == nil {
		panic("RepositoryMock.GetOrderFunc: method is nil but Repository.GetOrder was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetOrder.Lock()
	mock.calls.GetOrder = append(mock.calls.GetOrder, callInfo)
	mock.lockGetOrder.Unlock()
	return mock.GetOrderFunc(tx, uuidMoqParam)
}

// GetOrderCalls gets all the calls that were made to GetOrder.
// Check the length with:
//
//	len(mockedRepository.GetOrderCalls())
func (mock *RepositoryMock) GetOrderCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetOrder.RLock()
	calls = mock.calls.GetOrder
	mock.lockGetOrder.RUnlock()
	return calls
}

// GetOrderItem calls GetOrderItemFunc.
func (mock *RepositoryMock) GetOrderItem(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*OrderItem, error) {
	if mock.GetOrderItemFunc == nil {
		panic("RepositoryMock.GetOrderItemFunc: method is nil but Repository.GetOrderItem was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetOrderItem.Lock()
	mock.calls.GetOrderItem = append(mock.calls.GetOrderItem, callInfo)
	mock.lockGetOrderItem.Unlock()
	return mock.GetOrderItemFunc(tx, uuidMoqParam)
}

// GetOrderItemCalls gets all the calls that were made to GetOrderItem.
// Check the length with:
//
//	len(mockedRepository.GetOrderItemCalls())
func (mock *RepositoryMock) GetOrderItemCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetOrderItem.RLock()
	calls = mock.calls.GetOrderItem
	mock.lockGetOrderItem.RUnlock()
	return calls
}

// GetPasswordUser calls GetPasswordUserFunc.
func (mock *RepositoryMock) GetPasswordUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*PasswordUser, error) {
	if mock.GetPasswordUserFunc == nil {
		panic("RepositoryMock.GetPasswordUserFunc: method is nil but Repository.GetPasswordUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetPasswordUser.Lock()
	mock.calls.GetPasswordUser = append(mock.calls.GetPasswordUser, callInfo)
	mock.lockGetPasswordUser.Unlock()
	return mock.GetPasswordUserFunc(tx, uuidMoqParam)
}

// GetPasswordUserCalls gets all the calls that were made to GetPasswordUser.
// Check the length with:
//
//	len(mockedRepository.GetPasswordUserCalls())
func (mock *RepositoryMock) GetPasswordUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetPasswordUser.RLock()
	calls = mock.calls.GetPasswordUser
	mock.lockGetPasswordUser.RUnlock()
	return calls
}

// GetSshUser calls GetSshUserFunc.
func (mock *RepositoryMock) GetSshUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*SshUser, error) {
	if mock.GetSshUserFunc == nil {
		panic("RepositoryMock.GetSshUserFunc: method is nil but Repository.GetSshUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetSshUser.Lock()
	mock.calls.GetSshUser = append(mock.calls.GetSshUser, callInfo)
	mock.lockGetSshUser.Unlock()
	return mock.GetSshUserFunc(tx, uuidMoqParam)
}

// GetSshUserCalls gets all the calls that were made to GetSshUser.
// Check the length with:
//
//	len(mockedRepository.GetSshUserCalls())
func (mock *RepositoryMock) GetSshUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetSshUser.RLock()
	calls = mock.calls.GetSshUser
	mock.lockGetSshUser.RUnlock()
	return calls
}

// GetSshUserByPublicKey calls GetSshUserByPublicKeyFunc.
func (mock *RepositoryMock) GetSshUserByPublicKey(tx *gorm.DB, publicKey string) (*SshUser, error) {
	if mock.GetSshUserByPublicKeyFunc == nil {
		panic("RepositoryMock.GetSshUserByPublicKeyFunc: method is nil but Repository.GetSshUserByPublicKey was just called")
	}
	callInfo := struct {
		Tx        *gorm.DB
		PublicKey string
	}{
		Tx:        tx,
		PublicKey: publicKey,
	}
	mock.lockGetSshUserByPublicKey.Lock()
	mock.calls.GetSshUserByPublicKey = append(mock.calls.GetSshUserByPublicKey, callInfo)
	mock.lockGetSshUserByPublicKey.Unlock()
	return mock.GetSshUserByPublicKeyFunc(tx, publicKey)
}

// GetSshUserByPublicKeyCalls gets all the calls that were made to GetSshUserByPublicKey.
// Check the length with:
//
//	len(mockedRepository.GetSshUserByPublicKeyCalls())
func (mock *RepositoryMock) GetSshUserByPublicKeyCalls() []struct {
	Tx        *gorm.DB
	PublicKey string
} {
	var calls []struct {
		Tx        *gorm.DB
		PublicKey string
	}
	mock.lockGetSshUserByPublicKey.RLock()
	calls = mock.calls.GetSshUserByPublicKey
	mock.lockGetSshUserByPublicKey.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *RepositoryMock) GetUser(tx *gorm.DB, uuidMoqParam *uuid.UUID) (*User, error) {
	if mock.GetUserFunc == nil {
		panic("RepositoryMock.GetUserFunc: method is nil but Repository.GetUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(tx, uuidMoqParam)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedRepository.GetUserCalls())
func (mock *RepositoryMock) GetUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUserByName calls GetUserByNameFunc.
func (mock *RepositoryMock) GetUserByName(tx *gorm.DB, name string) (*User, error) {
	if mock.GetUserByNameFunc == nil {
		panic("RepositoryMock.GetUserByNameFunc: method is nil but Repository.GetUserByName was just called")
	}
	callInfo := struct {
		Tx   *gorm.DB
		Name string
	}{
		Tx:   tx,
		Name: name,
	}
	mock.lockGetUserByName.Lock()
	mock.calls.GetUserByName = append(mock.calls.GetUserByName, callInfo)
	mock.lockGetUserByName.Unlock()
	return mock.GetUserByNameFunc(tx, name)
}

// GetUserByNameCalls gets all the calls that were made to GetUserByName.
// Check the length with:
//
//	len(mockedRepository.GetUserByNameCalls())
func (mock *RepositoryMock) GetUserByNameCalls() []struct {
	Tx   *gorm.DB
	Name string
} {
	var calls []struct {
		Tx   *gorm.DB
		Name string
	}
	mock.lockGetUserByName.RLock()
	calls = mock.calls.GetUserByName
	mock.lockGetUserByName.RUnlock()
	return calls
}

// Transaction calls TransactionFunc.
func (mock *RepositoryMock) Transaction(fn func(tx *gorm.DB) error) error {
	if mock.TransactionFunc == nil {
		panic("RepositoryMock.TransactionFunc: method is nil but Repository.Transaction was just called")
	}
	callInfo := struct {
		Fn func(tx *gorm.DB) error
	}{
		Fn: fn,
	}
	mock.lockTransaction.Lock()
	mock.calls.Transaction = append(mock.calls.Transaction, callInfo)
	mock.lockTransaction.Unlock()
	return mock.TransactionFunc(fn)
}

// TransactionCalls gets all the calls that were made to Transaction.
// Check the length with:
//
//	len(mockedRepository.TransactionCalls())
func (mock *RepositoryMock) TransactionCalls() []struct {
	Fn func(tx *gorm.DB) error
} {
	var calls []struct {
		Fn func(tx *gorm.DB) error
	}
	mock.lockTransaction.RLock()
	calls = mock.calls.Transaction
	mock.lockTransaction.RUnlock()
	return calls
}

// UpdateMatrixUser calls UpdateMatrixUserFunc.
func (mock *RepositoryMock) UpdateMatrixUser(tx *gorm.DB, uuidMoqParam *uuid.UUID, matrixUser *MatrixUser) (*MatrixUser, error) {
	if mock.UpdateMatrixUserFunc == nil {
		panic("RepositoryMock.UpdateMatrixUserFunc: method is nil but Repository.UpdateMatrixUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		MatrixUser   *MatrixUser
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		MatrixUser:   matrixUser,
	}
	mock.lockUpdateMatrixUser.Lock()
	mock.calls.UpdateMatrixUser = append(mock.calls.UpdateMatrixUser, callInfo)
	mock.lockUpdateMatrixUser.Unlock()
	return mock.UpdateMatrixUserFunc(tx, uuidMoqParam, matrixUser)
}

// UpdateMatrixUserCalls gets all the calls that were made to UpdateMatrixUser.
// Check the length with:
//
//	len(mockedRepository.UpdateMatrixUserCalls())
func (mock *RepositoryMock) UpdateMatrixUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	MatrixUser   *MatrixUser
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		MatrixUser   *MatrixUser
	}
	mock.lockUpdateMatrixUser.RLock()
	calls = mock.calls.UpdateMatrixUser
	mock.lockUpdateMatrixUser.RUnlock()
	return calls
}

// UpdateMenu calls UpdateMenuFunc.
func (mock *RepositoryMock) UpdateMenu(tx *gorm.DB, uuidMoqParam *uuid.UUID, menu *Menu) (*Menu, error) {
	if mock.UpdateMenuFunc == nil {
		panic("RepositoryMock.UpdateMenuFunc: method is nil but Repository.UpdateMenu was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		Menu         *Menu
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		Menu:         menu,
	}
	mock.lockUpdateMenu.Lock()
	mock.calls.UpdateMenu = append(mock.calls.UpdateMenu, callInfo)
	mock.lockUpdateMenu.Unlock()
	return mock.UpdateMenuFunc(tx, uuidMoqParam, menu)
}

// UpdateMenuCalls gets all the calls that were made to UpdateMenu.
// Check the length with:
//
//	len(mockedRepository.UpdateMenuCalls())
func (mock *RepositoryMock) UpdateMenuCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	Menu         *Menu
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		Menu         *Menu
	}
	mock.lockUpdateMenu.RLock()
	calls = mock.calls.UpdateMenu
	mock.lockUpdateMenu.RUnlock()
	return calls
}

// UpdateOrder calls UpdateOrderFunc.
func (mock *RepositoryMock) UpdateOrder(tx *gorm.DB, uuidMoqParam *uuid.UUID, currentUser *uuid.UUID, order *Order) (*Order, error) {
	if mock.UpdateOrderFunc == nil {
		panic("RepositoryMock.UpdateOrderFunc: method is nil but Repository.UpdateOrder was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		CurrentUser  *uuid.UUID
		Order        *Order
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		CurrentUser:  currentUser,
		Order:        order,
	}
	mock.lockUpdateOrder.Lock()
	mock.calls.UpdateOrder = append(mock.calls.UpdateOrder, callInfo)
	mock.lockUpdateOrder.Unlock()
	return mock.UpdateOrderFunc(tx, uuidMoqParam, currentUser, order)
}

// UpdateOrderCalls gets all the calls that were made to UpdateOrder.
// Check the length with:
//
//	len(mockedRepository.UpdateOrderCalls())
func (mock *RepositoryMock) UpdateOrderCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	CurrentUser  *uuid.UUID
	Order        *Order
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		CurrentUser  *uuid.UUID
		Order        *Order
	}
	mock.lockUpdateOrder.RLock()
	calls = mock.calls.UpdateOrder
	mock.lockUpdateOrder.RUnlock()
	return calls
}

// UpdateOrderItem calls UpdateOrderItemFunc.
func (mock *RepositoryMock) UpdateOrderItem(tx *gorm.DB, orderItemUuid *uuid.UUID, userUuid *uuid.UUID, orderItem *OrderItem) (*OrderItem, error) {
	if mock.UpdateOrderItemFunc == nil {
		panic("RepositoryMock.UpdateOrderItemFunc: method is nil but Repository.UpdateOrderItem was just called")
	}
	callInfo := struct {
		Tx            *gorm.DB
		OrderItemUuid *uuid.UUID
		UserUuid      *uuid.UUID
		OrderItem     *OrderItem
	}{
		Tx:            tx,
		OrderItemUuid: orderItemUuid,
		UserUuid:      userUuid,
		OrderItem:     orderItem,
	}
	mock.lockUpdateOrderItem.Lock()
	mock.calls.UpdateOrderItem = append(mock.calls.UpdateOrderItem, callInfo)
	mock.lockUpdateOrderItem.Unlock()
	return mock.UpdateOrderItemFunc(tx, orderItemUuid, userUuid, orderItem)
}

// UpdateOrderItemCalls gets all the calls that were made to UpdateOrderItem.
// Check the length with:
//
//	len(mockedRepository.UpdateOrderItemCalls())
func (mock *RepositoryMock) UpdateOrderItemCalls() []struct {
	Tx            *gorm.DB
	OrderItemUuid *uuid.UUID
	UserUuid      *uuid.UUID
	OrderItem     *OrderItem
} {
	var calls []struct {
		Tx            *gorm.DB
		OrderItemUuid *uuid.UUID
		UserUuid      *uuid.UUID
		OrderItem     *OrderItem
	}
	mock.lockUpdateOrderItem.RLock()
	calls = mock.calls.UpdateOrderItem
	mock.lockUpdateOrderItem.RUnlock()
	return calls
}

// UpdatePasswordUser calls UpdatePasswordUserFunc.
func (mock *RepositoryMock) UpdatePasswordUser(tx *gorm.DB, uuidMoqParam *uuid.UUID, passwordUser *PasswordUser) (*PasswordUser, error) {
	if mock.UpdatePasswordUserFunc == nil {
		panic("RepositoryMock.UpdatePasswordUserFunc: method is nil but Repository.UpdatePasswordUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		PasswordUser *PasswordUser
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		PasswordUser: passwordUser,
	}
	mock.lockUpdatePasswordUser.Lock()
	mock.calls.UpdatePasswordUser = append(mock.calls.UpdatePasswordUser, callInfo)
	mock.lockUpdatePasswordUser.Unlock()
	return mock.UpdatePasswordUserFunc(tx, uuidMoqParam, passwordUser)
}

// UpdatePasswordUserCalls gets all the calls that were made to UpdatePasswordUser.
// Check the length with:
//
//	len(mockedRepository.UpdatePasswordUserCalls())
func (mock *RepositoryMock) UpdatePasswordUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	PasswordUser *PasswordUser
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		PasswordUser *PasswordUser
	}
	mock.lockUpdatePasswordUser.RLock()
	calls = mock.calls.UpdatePasswordUser
	mock.lockUpdatePasswordUser.RUnlock()
	return calls
}

// UpdateSshUser calls UpdateSshUserFunc.
func (mock *RepositoryMock) UpdateSshUser(tx *gorm.DB, uuidMoqParam *uuid.UUID, sshUser *SshUser) (*SshUser, error) {
	if mock.UpdateSshUserFunc == nil {
		panic("RepositoryMock.UpdateSshUserFunc: method is nil but Repository.UpdateSshUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		SshUser      *SshUser
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		SshUser:      sshUser,
	}
	mock.lockUpdateSshUser.Lock()
	mock.calls.UpdateSshUser = append(mock.calls.UpdateSshUser, callInfo)
	mock.lockUpdateSshUser.Unlock()
	return mock.UpdateSshUserFunc(tx, uuidMoqParam, sshUser)
}

// UpdateSshUserCalls gets all the calls that were made to UpdateSshUser.
// Check the length with:
//
//	len(mockedRepository.UpdateSshUserCalls())
func (mock *RepositoryMock) UpdateSshUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	SshUser      *SshUser
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		SshUser      *SshUser
	}
	mock.lockUpdateSshUser.RLock()
	calls = mock.calls.UpdateSshUser
	mock.lockUpdateSshUser.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *RepositoryMock) UpdateUser(tx *gorm.DB, uuidMoqParam *uuid.UUID, user *User) (*User, error) {
	if mock.UpdateUserFunc == nil {
		panic("RepositoryMock.UpdateUserFunc: method is nil but Repository.UpdateUser was just called")
	}
	callInfo := struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		User         *User
	}{
		Tx:           tx,
		UuidMoqParam: uuidMoqParam,
		User:         user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(tx, uuidMoqParam, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedRepository.UpdateUserCalls())
func (mock *RepositoryMock) UpdateUserCalls() []struct {
	Tx           *gorm.DB
	UuidMoqParam *uuid.UUID
	User         *User
} {
	var calls []struct {
		Tx           *gorm.DB
		UuidMoqParam *uuid.UUID
		User         *User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
