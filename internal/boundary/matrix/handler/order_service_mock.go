// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/Markus-Schwer/ordaa/internal/entity"
	"github.com/gofrs/uuid"
	"sync"
)

// Ensure, that OrderServiceMock does implement OrderService.
// If this is not the case, regenerate this file with moq.
var _ OrderService = &OrderServiceMock{}

// OrderServiceMock is a mock implementation of OrderService.
//
//	func TestSomethingThatUsesOrderService(t *testing.T) {
//
//		// make and configure a mocked OrderService
//		mockedOrderService := &OrderServiceMock{
//			AddOrderItemToOrderByNameFunc: func(ctx context.Context, currentUser *uuid.UUID, shortName string, menuName string) error {
//				panic("mock out the AddOrderItemToOrderByName method")
//			},
//			CreateOrderFunc: func(ctx context.Context, currentUser *uuid.UUID, order *entity.Order) (*entity.Order, error) {
//				panic("mock out the CreateOrder method")
//			},
//			CreateOrderForMenuNameFunc: func(ctx context.Context, currentUser *uuid.UUID, menuName string) (*entity.Order, error) {
//				panic("mock out the CreateOrderForMenuName method")
//			},
//			GetActiveOrderByMenuFunc: func(ctx context.Context, menuUUID *uuid.UUID) (*entity.Order, error) {
//				panic("mock out the GetActiveOrderByMenu method")
//			},
//			GetActiveOrderByMenuNameFunc: func(ctx context.Context, name string) (*entity.Order, error) {
//				panic("mock out the GetActiveOrderByMenuName method")
//			},
//			GetAllOrdersFunc: func(ctx context.Context) ([]entity.Order, error) {
//				panic("mock out the GetAllOrders method")
//			},
//			GetOrderFunc: func(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.Order, error) {
//				panic("mock out the GetOrder method")
//			},
//			UpdateOrderFunc: func(ctx context.Context, currentUser *uuid.UUID, uuidMoqParam *uuid.UUID, order *entity.Order) (*entity.Order, error) {
//				panic("mock out the UpdateOrder method")
//			},
//		}
//
//		// use mockedOrderService in code that requires OrderService
//		// and then make assertions.
//
//	}
type OrderServiceMock struct {
	// AddOrderItemToOrderByNameFunc mocks the AddOrderItemToOrderByName method.
	AddOrderItemToOrderByNameFunc func(ctx context.Context, currentUser *uuid.UUID, shortName string, menuName string) error

	// CreateOrderFunc mocks the CreateOrder method.
	CreateOrderFunc func(ctx context.Context, currentUser *uuid.UUID, order *entity.Order) (*entity.Order, error)

	// CreateOrderForMenuNameFunc mocks the CreateOrderForMenuName method.
	CreateOrderForMenuNameFunc func(ctx context.Context, currentUser *uuid.UUID, menuName string) (*entity.Order, error)

	// GetActiveOrderByMenuFunc mocks the GetActiveOrderByMenu method.
	GetActiveOrderByMenuFunc func(ctx context.Context, menuUUID *uuid.UUID) (*entity.Order, error)

	// GetActiveOrderByMenuNameFunc mocks the GetActiveOrderByMenuName method.
	GetActiveOrderByMenuNameFunc func(ctx context.Context, name string) (*entity.Order, error)

	// GetAllOrdersFunc mocks the GetAllOrders method.
	GetAllOrdersFunc func(ctx context.Context) ([]entity.Order, error)

	// GetOrderFunc mocks the GetOrder method.
	GetOrderFunc func(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.Order, error)

	// UpdateOrderFunc mocks the UpdateOrder method.
	UpdateOrderFunc func(ctx context.Context, currentUser *uuid.UUID, uuidMoqParam *uuid.UUID, order *entity.Order) (*entity.Order, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddOrderItemToOrderByName holds details about calls to the AddOrderItemToOrderByName method.
		AddOrderItemToOrderByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentUser is the currentUser argument value.
			CurrentUser *uuid.UUID
			// ShortName is the shortName argument value.
			ShortName string
			// MenuName is the menuName argument value.
			MenuName string
		}
		// CreateOrder holds details about calls to the CreateOrder method.
		CreateOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentUser is the currentUser argument value.
			CurrentUser *uuid.UUID
			// Order is the order argument value.
			Order *entity.Order
		}
		// CreateOrderForMenuName holds details about calls to the CreateOrderForMenuName method.
		CreateOrderForMenuName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentUser is the currentUser argument value.
			CurrentUser *uuid.UUID
			// MenuName is the menuName argument value.
			MenuName string
		}
		// GetActiveOrderByMenu holds details about calls to the GetActiveOrderByMenu method.
		GetActiveOrderByMenu []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MenuUUID is the menuUUID argument value.
			MenuUUID *uuid.UUID
		}
		// GetActiveOrderByMenuName holds details about calls to the GetActiveOrderByMenuName method.
		GetActiveOrderByMenuName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAllOrders holds details about calls to the GetAllOrders method.
		GetAllOrders []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetOrder holds details about calls to the GetOrder method.
		GetOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// UpdateOrder holds details about calls to the UpdateOrder method.
		UpdateOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CurrentUser is the currentUser argument value.
			CurrentUser *uuid.UUID
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// Order is the order argument value.
			Order *entity.Order
		}
	}
	lockAddOrderItemToOrderByName sync.RWMutex
	lockCreateOrder               sync.RWMutex
	lockCreateOrderForMenuName    sync.RWMutex
	lockGetActiveOrderByMenu      sync.RWMutex
	lockGetActiveOrderByMenuName  sync.RWMutex
	lockGetAllOrders              sync.RWMutex
	lockGetOrder                  sync.RWMutex
	lockUpdateOrder               sync.RWMutex
}

// AddOrderItemToOrderByName calls AddOrderItemToOrderByNameFunc.
func (mock *OrderServiceMock) AddOrderItemToOrderByName(ctx context.Context, currentUser *uuid.UUID, shortName string, menuName string) error {
	if mock.AddOrderItemToOrderByNameFunc == nil {
		panic("OrderServiceMock.AddOrderItemToOrderByNameFunc: method is nil but OrderService.AddOrderItemToOrderByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		ShortName   string
		MenuName    string
	}{
		Ctx:         ctx,
		CurrentUser: currentUser,
		ShortName:   shortName,
		MenuName:    menuName,
	}
	mock.lockAddOrderItemToOrderByName.Lock()
	mock.calls.AddOrderItemToOrderByName = append(mock.calls.AddOrderItemToOrderByName, callInfo)
	mock.lockAddOrderItemToOrderByName.Unlock()
	return mock.AddOrderItemToOrderByNameFunc(ctx, currentUser, shortName, menuName)
}

// AddOrderItemToOrderByNameCalls gets all the calls that were made to AddOrderItemToOrderByName.
// Check the length with:
//
//	len(mockedOrderService.AddOrderItemToOrderByNameCalls())
func (mock *OrderServiceMock) AddOrderItemToOrderByNameCalls() []struct {
	Ctx         context.Context
	CurrentUser *uuid.UUID
	ShortName   string
	MenuName    string
} {
	var calls []struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		ShortName   string
		MenuName    string
	}
	mock.lockAddOrderItemToOrderByName.RLock()
	calls = mock.calls.AddOrderItemToOrderByName
	mock.lockAddOrderItemToOrderByName.RUnlock()
	return calls
}

// CreateOrder calls CreateOrderFunc.
func (mock *OrderServiceMock) CreateOrder(ctx context.Context, currentUser *uuid.UUID, order *entity.Order) (*entity.Order, error) {
	if mock.CreateOrderFunc == nil {
		panic("OrderServiceMock.CreateOrderFunc: method is nil but OrderService.CreateOrder was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		Order       *entity.Order
	}{
		Ctx:         ctx,
		CurrentUser: currentUser,
		Order:       order,
	}
	mock.lockCreateOrder.Lock()
	mock.calls.CreateOrder = append(mock.calls.CreateOrder, callInfo)
	mock.lockCreateOrder.Unlock()
	return mock.CreateOrderFunc(ctx, currentUser, order)
}

// CreateOrderCalls gets all the calls that were made to CreateOrder.
// Check the length with:
//
//	len(mockedOrderService.CreateOrderCalls())
func (mock *OrderServiceMock) CreateOrderCalls() []struct {
	Ctx         context.Context
	CurrentUser *uuid.UUID
	Order       *entity.Order
} {
	var calls []struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		Order       *entity.Order
	}
	mock.lockCreateOrder.RLock()
	calls = mock.calls.CreateOrder
	mock.lockCreateOrder.RUnlock()
	return calls
}

// CreateOrderForMenuName calls CreateOrderForMenuNameFunc.
func (mock *OrderServiceMock) CreateOrderForMenuName(ctx context.Context, currentUser *uuid.UUID, menuName string) (*entity.Order, error) {
	if mock.CreateOrderForMenuNameFunc == nil {
		panic("OrderServiceMock.CreateOrderForMenuNameFunc: method is nil but OrderService.CreateOrderForMenuName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		MenuName    string
	}{
		Ctx:         ctx,
		CurrentUser: currentUser,
		MenuName:    menuName,
	}
	mock.lockCreateOrderForMenuName.Lock()
	mock.calls.CreateOrderForMenuName = append(mock.calls.CreateOrderForMenuName, callInfo)
	mock.lockCreateOrderForMenuName.Unlock()
	return mock.CreateOrderForMenuNameFunc(ctx, currentUser, menuName)
}

// CreateOrderForMenuNameCalls gets all the calls that were made to CreateOrderForMenuName.
// Check the length with:
//
//	len(mockedOrderService.CreateOrderForMenuNameCalls())
func (mock *OrderServiceMock) CreateOrderForMenuNameCalls() []struct {
	Ctx         context.Context
	CurrentUser *uuid.UUID
	MenuName    string
} {
	var calls []struct {
		Ctx         context.Context
		CurrentUser *uuid.UUID
		MenuName    string
	}
	mock.lockCreateOrderForMenuName.RLock()
	calls = mock.calls.CreateOrderForMenuName
	mock.lockCreateOrderForMenuName.RUnlock()
	return calls
}

// GetActiveOrderByMenu calls GetActiveOrderByMenuFunc.
func (mock *OrderServiceMock) GetActiveOrderByMenu(ctx context.Context, menuUUID *uuid.UUID) (*entity.Order, error) {
	if mock.GetActiveOrderByMenuFunc == nil {
		panic("OrderServiceMock.GetActiveOrderByMenuFunc: method is nil but OrderService.GetActiveOrderByMenu was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MenuUUID *uuid.UUID
	}{
		Ctx:      ctx,
		MenuUUID: menuUUID,
	}
	mock.lockGetActiveOrderByMenu.Lock()
	mock.calls.GetActiveOrderByMenu = append(mock.calls.GetActiveOrderByMenu, callInfo)
	mock.lockGetActiveOrderByMenu.Unlock()
	return mock.GetActiveOrderByMenuFunc(ctx, menuUUID)
}

// GetActiveOrderByMenuCalls gets all the calls that were made to GetActiveOrderByMenu.
// Check the length with:
//
//	len(mockedOrderService.GetActiveOrderByMenuCalls())
func (mock *OrderServiceMock) GetActiveOrderByMenuCalls() []struct {
	Ctx      context.Context
	MenuUUID *uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MenuUUID *uuid.UUID
	}
	mock.lockGetActiveOrderByMenu.RLock()
	calls = mock.calls.GetActiveOrderByMenu
	mock.lockGetActiveOrderByMenu.RUnlock()
	return calls
}

// GetActiveOrderByMenuName calls GetActiveOrderByMenuNameFunc.
func (mock *OrderServiceMock) GetActiveOrderByMenuName(ctx context.Context, name string) (*entity.Order, error) {
	if mock.GetActiveOrderByMenuNameFunc == nil {
		panic("OrderServiceMock.GetActiveOrderByMenuNameFunc: method is nil but OrderService.GetActiveOrderByMenuName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetActiveOrderByMenuName.Lock()
	mock.calls.GetActiveOrderByMenuName = append(mock.calls.GetActiveOrderByMenuName, callInfo)
	mock.lockGetActiveOrderByMenuName.Unlock()
	return mock.GetActiveOrderByMenuNameFunc(ctx, name)
}

// GetActiveOrderByMenuNameCalls gets all the calls that were made to GetActiveOrderByMenuName.
// Check the length with:
//
//	len(mockedOrderService.GetActiveOrderByMenuNameCalls())
func (mock *OrderServiceMock) GetActiveOrderByMenuNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetActiveOrderByMenuName.RLock()
	calls = mock.calls.GetActiveOrderByMenuName
	mock.lockGetActiveOrderByMenuName.RUnlock()
	return calls
}

// GetAllOrders calls GetAllOrdersFunc.
func (mock *OrderServiceMock) GetAllOrders(ctx context.Context) ([]entity.Order, error) {
	if mock.GetAllOrdersFunc == nil {
		panic("OrderServiceMock.GetAllOrdersFunc: method is nil but OrderService.GetAllOrders was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllOrders.Lock()
	mock.calls.GetAllOrders = append(mock.calls.GetAllOrders, callInfo)
	mock.lockGetAllOrders.Unlock()
	return mock.GetAllOrdersFunc(ctx)
}

// GetAllOrdersCalls gets all the calls that were made to GetAllOrders.
// Check the length with:
//
//	len(mockedOrderService.GetAllOrdersCalls())
func (mock *OrderServiceMock) GetAllOrdersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllOrders.RLock()
	calls = mock.calls.GetAllOrders
	mock.lockGetAllOrders.RUnlock()
	return calls
}

// GetOrder calls GetOrderFunc.
func (mock *OrderServiceMock) GetOrder(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.Order, error) {
	if mock.GetOrderFunc == nil {
		panic("OrderServiceMock.GetOrderFunc: method is nil but OrderService.GetOrder was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}{
		Ctx:          ctx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetOrder.Lock()
	mock.calls.GetOrder = append(mock.calls.GetOrder, callInfo)
	mock.lockGetOrder.Unlock()
	return mock.GetOrderFunc(ctx, uuidMoqParam)
}

// GetOrderCalls gets all the calls that were made to GetOrder.
// Check the length with:
//
//	len(mockedOrderService.GetOrderCalls())
func (mock *OrderServiceMock) GetOrderCalls() []struct {
	Ctx          context.Context
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetOrder.RLock()
	calls = mock.calls.GetOrder
	mock.lockGetOrder.RUnlock()
	return calls
}

// UpdateOrder calls UpdateOrderFunc.
func (mock *OrderServiceMock) UpdateOrder(ctx context.Context, currentUser *uuid.UUID, uuidMoqParam *uuid.UUID, order *entity.Order) (*entity.Order, error) {
	if mock.UpdateOrderFunc == nil {
		panic("OrderServiceMock.UpdateOrderFunc: method is nil but OrderService.UpdateOrder was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		CurrentUser  *uuid.UUID
		UuidMoqParam *uuid.UUID
		Order        *entity.Order
	}{
		Ctx:          ctx,
		CurrentUser:  currentUser,
		UuidMoqParam: uuidMoqParam,
		Order:        order,
	}
	mock.lockUpdateOrder.Lock()
	mock.calls.UpdateOrder = append(mock.calls.UpdateOrder, callInfo)
	mock.lockUpdateOrder.Unlock()
	return mock.UpdateOrderFunc(ctx, currentUser, uuidMoqParam, order)
}

// UpdateOrderCalls gets all the calls that were made to UpdateOrder.
// Check the length with:
//
//	len(mockedOrderService.UpdateOrderCalls())
func (mock *OrderServiceMock) UpdateOrderCalls() []struct {
	Ctx          context.Context
	CurrentUser  *uuid.UUID
	UuidMoqParam *uuid.UUID
	Order        *entity.Order
} {
	var calls []struct {
		Ctx          context.Context
		CurrentUser  *uuid.UUID
		UuidMoqParam *uuid.UUID
		Order        *entity.Order
	}
	mock.lockUpdateOrder.RLock()
	calls = mock.calls.UpdateOrder
	mock.lockUpdateOrder.RUnlock()
	return calls
}
