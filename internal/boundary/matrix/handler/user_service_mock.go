// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/Markus-Schwer/ordaa/internal/entity"
	"github.com/gofrs/uuid"
	"sync"
)

// Ensure, that UserServiceMock does implement UserService.
// If this is not the case, regenerate this file with moq.
var _ UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked UserService
//		mockedUserService := &UserServiceMock{
//			CreateUserFunc: func(ctx context.Context, user *entity.User) (*entity.User, error) {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(ctx context.Context, uuidMoqParam *uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetAllUsersFunc: func(ctx context.Context) ([]entity.User, error) {
//				panic("mock out the GetAllUsers method")
//			},
//			GetMatrixUserByUsernameFunc: func(ctx context.Context, username string) (*entity.MatrixUser, error) {
//				panic("mock out the GetMatrixUserByUsername method")
//			},
//			GetUserFunc: func(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.User, error) {
//				panic("mock out the GetUser method")
//			},
//			RegisterMatrixUserFunc: func(ctx context.Context, username string) (*entity.User, error) {
//				panic("mock out the RegisterMatrixUser method")
//			},
//			SetPublicKeyFunc: func(ctx context.Context, userUUID *uuid.UUID, publicKey string) error {
//				panic("mock out the SetPublicKey method")
//			},
//			UpdateUserFunc: func(ctx context.Context, uuidMoqParam *uuid.UUID, user *entity.User) (*entity.User, error) {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserService in code that requires UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user *entity.User) (*entity.User, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, uuidMoqParam *uuid.UUID) error

	// GetAllUsersFunc mocks the GetAllUsers method.
	GetAllUsersFunc func(ctx context.Context) ([]entity.User, error)

	// GetMatrixUserByUsernameFunc mocks the GetMatrixUserByUsername method.
	GetMatrixUserByUsernameFunc func(ctx context.Context, username string) (*entity.MatrixUser, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.User, error)

	// RegisterMatrixUserFunc mocks the RegisterMatrixUser method.
	RegisterMatrixUserFunc func(ctx context.Context, username string) (*entity.User, error)

	// SetPublicKeyFunc mocks the SetPublicKey method.
	SetPublicKeyFunc func(ctx context.Context, userUUID *uuid.UUID, publicKey string) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, uuidMoqParam *uuid.UUID, user *entity.User) (*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *entity.User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// GetAllUsers holds details about calls to the GetAllUsers method.
		GetAllUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetMatrixUserByUsername holds details about calls to the GetMatrixUserByUsername method.
		GetMatrixUserByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
		}
		// RegisterMatrixUser holds details about calls to the RegisterMatrixUser method.
		RegisterMatrixUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// SetPublicKey holds details about calls to the SetPublicKey method.
		SetPublicKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserUUID is the userUUID argument value.
			UserUUID *uuid.UUID
			// PublicKey is the publicKey argument value.
			PublicKey string
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UuidMoqParam is the uuidMoqParam argument value.
			UuidMoqParam *uuid.UUID
			// User is the user argument value.
			User *entity.User
		}
	}
	lockCreateUser              sync.RWMutex
	lockDeleteUser              sync.RWMutex
	lockGetAllUsers             sync.RWMutex
	lockGetMatrixUserByUsername sync.RWMutex
	lockGetUser                 sync.RWMutex
	lockRegisterMatrixUser      sync.RWMutex
	lockSetPublicKey            sync.RWMutex
	lockUpdateUser              sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserServiceMock) CreateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	if mock.CreateUserFunc == nil {
		panic("UserServiceMock.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *entity.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserService.CreateUserCalls())
func (mock *UserServiceMock) CreateUserCalls() []struct {
	Ctx  context.Context
	User *entity.User
} {
	var calls []struct {
		Ctx  context.Context
		User *entity.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserServiceMock) DeleteUser(ctx context.Context, uuidMoqParam *uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("UserServiceMock.DeleteUserFunc: method is nil but UserService.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}{
		Ctx:          ctx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, uuidMoqParam)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserService.DeleteUserCalls())
func (mock *UserServiceMock) DeleteUserCalls() []struct {
	Ctx          context.Context
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetAllUsers calls GetAllUsersFunc.
func (mock *UserServiceMock) GetAllUsers(ctx context.Context) ([]entity.User, error) {
	if mock.GetAllUsersFunc == nil {
		panic("UserServiceMock.GetAllUsersFunc: method is nil but UserService.GetAllUsers was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUsers.Lock()
	mock.calls.GetAllUsers = append(mock.calls.GetAllUsers, callInfo)
	mock.lockGetAllUsers.Unlock()
	return mock.GetAllUsersFunc(ctx)
}

// GetAllUsersCalls gets all the calls that were made to GetAllUsers.
// Check the length with:
//
//	len(mockedUserService.GetAllUsersCalls())
func (mock *UserServiceMock) GetAllUsersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUsers.RLock()
	calls = mock.calls.GetAllUsers
	mock.lockGetAllUsers.RUnlock()
	return calls
}

// GetMatrixUserByUsername calls GetMatrixUserByUsernameFunc.
func (mock *UserServiceMock) GetMatrixUserByUsername(ctx context.Context, username string) (*entity.MatrixUser, error) {
	if mock.GetMatrixUserByUsernameFunc == nil {
		panic("UserServiceMock.GetMatrixUserByUsernameFunc: method is nil but UserService.GetMatrixUserByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetMatrixUserByUsername.Lock()
	mock.calls.GetMatrixUserByUsername = append(mock.calls.GetMatrixUserByUsername, callInfo)
	mock.lockGetMatrixUserByUsername.Unlock()
	return mock.GetMatrixUserByUsernameFunc(ctx, username)
}

// GetMatrixUserByUsernameCalls gets all the calls that were made to GetMatrixUserByUsername.
// Check the length with:
//
//	len(mockedUserService.GetMatrixUserByUsernameCalls())
func (mock *UserServiceMock) GetMatrixUserByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetMatrixUserByUsername.RLock()
	calls = mock.calls.GetMatrixUserByUsername
	mock.lockGetMatrixUserByUsername.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *UserServiceMock) GetUser(ctx context.Context, uuidMoqParam *uuid.UUID) (*entity.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserServiceMock.GetUserFunc: method is nil but UserService.GetUser was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}{
		Ctx:          ctx,
		UuidMoqParam: uuidMoqParam,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, uuidMoqParam)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserService.GetUserCalls())
func (mock *UserServiceMock) GetUserCalls() []struct {
	Ctx          context.Context
	UuidMoqParam *uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// RegisterMatrixUser calls RegisterMatrixUserFunc.
func (mock *UserServiceMock) RegisterMatrixUser(ctx context.Context, username string) (*entity.User, error) {
	if mock.RegisterMatrixUserFunc == nil {
		panic("UserServiceMock.RegisterMatrixUserFunc: method is nil but UserService.RegisterMatrixUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockRegisterMatrixUser.Lock()
	mock.calls.RegisterMatrixUser = append(mock.calls.RegisterMatrixUser, callInfo)
	mock.lockRegisterMatrixUser.Unlock()
	return mock.RegisterMatrixUserFunc(ctx, username)
}

// RegisterMatrixUserCalls gets all the calls that were made to RegisterMatrixUser.
// Check the length with:
//
//	len(mockedUserService.RegisterMatrixUserCalls())
func (mock *UserServiceMock) RegisterMatrixUserCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockRegisterMatrixUser.RLock()
	calls = mock.calls.RegisterMatrixUser
	mock.lockRegisterMatrixUser.RUnlock()
	return calls
}

// SetPublicKey calls SetPublicKeyFunc.
func (mock *UserServiceMock) SetPublicKey(ctx context.Context, userUUID *uuid.UUID, publicKey string) error {
	if mock.SetPublicKeyFunc == nil {
		panic("UserServiceMock.SetPublicKeyFunc: method is nil but UserService.SetPublicKey was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UserUUID  *uuid.UUID
		PublicKey string
	}{
		Ctx:       ctx,
		UserUUID:  userUUID,
		PublicKey: publicKey,
	}
	mock.lockSetPublicKey.Lock()
	mock.calls.SetPublicKey = append(mock.calls.SetPublicKey, callInfo)
	mock.lockSetPublicKey.Unlock()
	return mock.SetPublicKeyFunc(ctx, userUUID, publicKey)
}

// SetPublicKeyCalls gets all the calls that were made to SetPublicKey.
// Check the length with:
//
//	len(mockedUserService.SetPublicKeyCalls())
func (mock *UserServiceMock) SetPublicKeyCalls() []struct {
	Ctx       context.Context
	UserUUID  *uuid.UUID
	PublicKey string
} {
	var calls []struct {
		Ctx       context.Context
		UserUUID  *uuid.UUID
		PublicKey string
	}
	mock.lockSetPublicKey.RLock()
	calls = mock.calls.SetPublicKey
	mock.lockSetPublicKey.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserServiceMock) UpdateUser(ctx context.Context, uuidMoqParam *uuid.UUID, user *entity.User) (*entity.User, error) {
	if mock.UpdateUserFunc == nil {
		panic("UserServiceMock.UpdateUserFunc: method is nil but UserService.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
		User         *entity.User
	}{
		Ctx:          ctx,
		UuidMoqParam: uuidMoqParam,
		User:         user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, uuidMoqParam, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserService.UpdateUserCalls())
func (mock *UserServiceMock) UpdateUserCalls() []struct {
	Ctx          context.Context
	UuidMoqParam *uuid.UUID
	User         *entity.User
} {
	var calls []struct {
		Ctx          context.Context
		UuidMoqParam *uuid.UUID
		User         *entity.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
